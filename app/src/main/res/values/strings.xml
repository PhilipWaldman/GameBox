<resources>
    <string name="app_name" translatable="false">Game Box</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_subtitle">A collection of fun games, useful tools, and more.</string>
    <string name="nav_header_desc">Navigation header</string>

    <!-- Menu bar -->
    <string name="menu_games">Games</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_demos">Demos</string>
    <string name="menu_settings">Settings</string>

    <string name="info_button_content_description">Info button</string>

    <!-- Activity names -->
    <string name="fall_detection_demo">Fall Detection Algorithm</string>
    <string name="pi_estimators_demo">Pi Estimators</string>
    <string name="tic_tac_toe_game">Tic-tac-toe</string>
    <string name="simon_game">Simon</string>
    <string name="face_clicker_game">Face Clicker</string>
    <string name="morse_code_tool">Morse Code</string>

    <!-- Preferences -->
    <string name="dark_mode">Dark mode</string>
    <string name="language">Language</string>

    <!-- Games general -->
    <string name="play_again">Play again</string>

    <!-- Tic-tac-toe -->
    <string name="ttt_turn_x">It is X\'s turn</string>
    <string name="ttt_turn_o">It is O\'s turn</string>
    <string name="ttt_win_x">X has won!</string>
    <string name="ttt_win_o">O has won!</string>
    <string name="ttt_tie">Tie</string>
    <string name="ttt_square00_content_description">Tic-tac-toe square 0, 0</string>
    <string name="ttt_square01_content_description">Tic-tac-toe square 0, 1</string>
    <string name="ttt_square02_content_description">Tic-tac-toe square 0, 2</string>
    <string name="ttt_square10_content_description">Tic-tac-toe square 1, 0</string>
    <string name="ttt_square11_content_description">Tic-tac-toe square 1, 1</string>
    <string name="ttt_square12_content_description">Tic-tac-toe square 1, 2</string>
    <string name="ttt_square20_content_description">Tic-tac-toe square 2, 0</string>
    <string name="ttt_square21_content_description">Tic-tac-toe square 2, 1</string>
    <string name="ttt_square22_content_description">Tic-tac-toe square 2, 2</string>

    <!-- Fall detector -->
    <string name="reset">Reset</string>
    <string name="free_fall">Free fall</string>
    <string name="idle">Idle</string>
    <string name="impact">Impact</string>
    <string name="laying_on_ground">Laying on ground</string>
    <string name="about_fall_detect_button">About the fall detection algorithm</string>
    <string name="how_it_works_title">How it works</string>
    <string name="how_it_works_description">I originally made a simple app to test this algorithm that was developed for a school project. Because of limited time, a simple algorithm was chosen. This is what we wrote in our report to describe the algorithm:\n\nThe algorithm calculates if a fall has occurred using acceleration data. Nearly every smartphone has a 3-axis accelerometer in it. During normal, everyday activities the accelerometer readings will be changing all the time. Different activities have their own acceleration patterns. The acceleration pattern of a fall consists of various stages. First, the acceleration approaches zero as the person is falling and is essentially in free fall. Shortly after that, there is a large spike in the acceleration as the person hits the ground. Then, the acceleration remains constant as the person is lying on the ground. Because the person went from standing to laying, his/her orientation has changed.\n\nPseudocode:\n1. Measures acceleration in the x-, y-, and z-axes.\n2. Calculate the sum of the three axes.\n3. If the acceleration is below 0.5 m/s^2 , the person may be falling, continue to the next step; else return to 1.\n4. If within 0.5 s the acceleration is above 50 m/s^2 , the person may have hit the ground, continue to the next step; else return to 1.\n5. After 0.5 s the person will have stabilized. If his/her orientation has changed by more than 45° compared to before the fall, the person may be lying on the ground, continue to the next step; else return to 1.\n6. For the next 5 s, if the person’s orientation remains within 45°, he/she may not be able to move anymore and it is likely that this was a fall, sound and send the alarm; else return to 1.\n\nThe change in orientation is calculated by finding the angle between the acceleration vectors at two points in time. The angle between two vectors, a and b, is a•b=ǁaǁǁbǁcosθ → θ=arccos([a•b]/[ǁaǁǁbǁ]). If this angle is greater than 45°, the orientation has changed sufficiently for this purpose.\n\nBecause this app was used for testing, the raw acceleration data along the x-, y-, and z-axes, the total acceleration, the lowest and highest acceleration measured, the change in angle (only during certain state of the fall), and the current state the fall is in. The different states of the fall change the background color. Instead of an alarm going off when the fall has been detected, the phone vibrates.</string>

    <!-- Morse Code -->
    <string name="type_a_message">Type a message</string>
    <string name="play_message_in_morse_code">Show the message in morse code</string>

    <!-- Simon -->
    <string name="simon_red_button_content_description">Red button</string>
    <string name="simon_green_button_content_description">Green button</string>
    <string name="simon_blue_button_content_description">Blue button</string>
    <string name="simon_yellow_button_content_description">Yellow button</string>
    <string name="start">Start</string>
    <string name="stop">Stop</string>

    <!-- Pi Est -->
    <string name="rand_points_pi">Random Points</string>
    <string name="buffon_needles_pi">Buffon\'s Needles</string>
</resources>